{"ast":null,"code":"var _jsxFileName = \"/home/cab/deezflow/src/components/MyPlaylist.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useContext, useRef } from 'react';\nimport { useParams } from 'react-router-dom';\nimport ColorThemeContext from '../Contexts/ColorThemeContext';\nimport PlayerContext from '../Contexts/PlayerContext';\nimport './MyPlaylist.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MyPlaylist = () => {\n  _s();\n\n  const {\n    myColorTheme\n  } = useContext(ColorThemeContext);\n  const {\n    setTracks,\n    currentTrack,\n    setCurrentTrack,\n    isPlaying,\n    setIsPlaying\n  } = useContext(PlayerContext);\n  const {\n    id\n  } = useParams();\n  const [myPlaylist, setMyPlaylist] = useState([]);\n  const [myPlaylistCover, setMyPlaylistCover] = useState('');\n  useEffect(() => {\n    setTracks(myPlaylist);\n  }, [myPlaylist]);\n\n  function onTrackPause(track) {}\n\n  function onTrackPlay(track) {\n    setCurrentTrack(track);\n    setIsPlaying(true);\n  }\n\n  const currentTrackElm = useRef();\n  /**\n  * Joue la musique courante\n  */\n\n  function play() {\n    currentTrackElm.current.play();\n    setIsPlaying(true);\n  }\n  /**\n   * Met la musique courante en pause\n   */\n\n\n  function pause() {\n    currentTrackElm.current.pause();\n    setIsPlaying(false);\n  }\n\n  useEffect(() => {\n    fetch(`${process.env.REACT_APP_DEEZFLOW_API}/deezer/playlist/${id || myPlaylistId}`).then(response => response.json()).then(data => {\n      if (data.error) {\n        return setMyPlaylist([]);\n      }\n\n      setMyPlaylistCover(data['picture_medium']);\n      setMyPlaylist(data.tracks.data.map(track => ({\n        bigPicture: track.album.cover_big,\n        smallPicture: track.album.cover_small,\n        title: track.title,\n        artist: track.artist.name,\n        duration: 30,\n        src: track.preview\n      })));\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"playlist-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playlist-cover\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: myPlaylistCover,\n        alt: \"cover\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: `buttonPlay playButton  ${myColorTheme ? `theme-${myColorTheme}-shadow` : 'theme-default-shadow'}`,\n      onClick: () => {\n        setIsPlaying(true);\n      },\n      children: \"PLAY ALL\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"warpPlaylist\",\n      children: myPlaylist.map(track => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"track-info-box active\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"track-info-text\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"title-track\",\n            children: track.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"singer\",\n            children: track.artist\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this), isPlaying && currentTrack.src === track.src ? /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"pause\",\n          onClick: () => {\n            onTrackPause(track);\n            pause();\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: `icon-pause ${myColorTheme ? `theme-${myColorTheme}-fill` : 'theme-default-fill'}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"play\",\n          onClick: () => {\n            onTrackPlay(track);\n            play();\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: `icon-play ${myColorTheme ? `theme-${myColorTheme}-fill` : 'theme-default-fill'}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 15\n        }, this)]\n      }, track.src, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MyPlaylist, \"rBbnIBdpt6HCiQtbOKn8Qg0NvzM=\", false, function () {\n  return [useParams];\n});\n\n_c = MyPlaylist;\nexport default MyPlaylist;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyPlaylist\");","map":{"version":3,"sources":["/home/cab/deezflow/src/components/MyPlaylist.jsx"],"names":["useState","useEffect","useContext","useRef","useParams","ColorThemeContext","PlayerContext","MyPlaylist","myColorTheme","setTracks","currentTrack","setCurrentTrack","isPlaying","setIsPlaying","id","myPlaylist","setMyPlaylist","myPlaylistCover","setMyPlaylistCover","onTrackPause","track","onTrackPlay","currentTrackElm","play","current","pause","fetch","process","env","REACT_APP_DEEZFLOW_API","myPlaylistId","then","response","json","data","error","tracks","map","bigPicture","album","cover_big","smallPicture","cover_small","title","artist","name","duration","src","preview"],"mappings":"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","sourcesContent":["import { useState, useEffect, useContext, useRef } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport ColorThemeContext from '../Contexts/ColorThemeContext';\nimport PlayerContext from '../Contexts/PlayerContext';\n\nimport './MyPlaylist.css';\n\nconst MyPlaylist = () => {\n  const { myColorTheme } = useContext(ColorThemeContext);\n  const { setTracks, currentTrack, setCurrentTrack, isPlaying, setIsPlaying } =\n    useContext(PlayerContext);\n\n  const { id } = useParams();\n  const [myPlaylist, setMyPlaylist] = useState([]);\n  const [myPlaylistCover, setMyPlaylistCover] = useState('');\n\n  useEffect(() => {\n    setTracks(myPlaylist);\n  }, [myPlaylist]);\n\n  function onTrackPause(track) {}\n\n  function onTrackPlay(track) {\n    setCurrentTrack(track);\n    setIsPlaying(true);\n  }\n\n  const currentTrackElm = useRef();\n\n    /**\n   * Joue la musique courante\n   */\n     function play() {\n      currentTrackElm.current.play();\n      setIsPlaying(true);\n    }\n  \n    /**\n     * Met la musique courante en pause\n     */\n    function pause() {\n      currentTrackElm.current.pause();\n      setIsPlaying(false);\n    }\n\n  useEffect(() => {\n    fetch(\n      `${process.env.REACT_APP_DEEZFLOW_API}/deezer/playlist/${\n        id || myPlaylistId\n      }`\n    )\n      .then((response) => response.json())\n      .then((data) => {\n        if (data.error) {\n          return setMyPlaylist([]);\n        }\n\n        setMyPlaylistCover(data['picture_medium']);\n\n        setMyPlaylist(\n          data.tracks.data.map((track) => ({\n            bigPicture: track.album.cover_big,\n            smallPicture: track.album.cover_small,\n            title: track.title,\n            artist: track.artist.name,\n            duration: 30,\n            src: track.preview,\n          }))\n        );\n      });\n  }, []);\n\n  return (\n    <div className=\"playlist-container\">\n      <div className=\"playlist-cover\">\n        <img src={myPlaylistCover} alt=\"cover\" />\n      </div>\n\n      <button\n        className={`buttonPlay playButton  ${\n          myColorTheme ? `theme-${myColorTheme}-shadow` : 'theme-default-shadow'\n        }`}\n        onClick={() => {\n          setIsPlaying(true);\n        }}\n      >\n        PLAY ALL</button>\n\n      <div className=\"warpPlaylist\">\n        {myPlaylist.map((track) => (\n          <div key={track.src} className=\"track-info-box active\">\n            <div className=\"track-info-text\">\n              <p className=\"title-track\">{track.title}</p>\n              <p className=\"singer\">{track.artist}</p>\n            </div>\n\n            {isPlaying && currentTrack.src === track.src ? (\n              <button className=\"pause\" onClick={() => {\n                onTrackPause(track);\n                pause()}}>\n                <div>\n                  <span\n                    className={`icon-pause ${\n                      myColorTheme\n                        ? `theme-${myColorTheme}-fill`\n                        : 'theme-default-fill'\n                    }`}\n                  />\n                </div>\n              </button>\n            ) : (\n              <button className=\"play\" onClick={() => {\n                onTrackPlay(track);\n                play();\n              }}>\n                <div>\n                  <span\n                    className={`icon-play ${\n                      myColorTheme\n                        ? `theme-${myColorTheme}-fill`\n                        : 'theme-default-fill'\n                    }`}\n                  />\n                </div>\n              </button>\n            )}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default MyPlaylist;\n"]},"metadata":{},"sourceType":"module"}