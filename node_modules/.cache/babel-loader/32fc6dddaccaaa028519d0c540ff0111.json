{"ast":null,"code":"var _jsxFileName = \"/home/cab/deezflow/src/App.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport Navbar from './components/Navbar/Navbar';\nimport Player from './components/Player';\nimport Header from './components/header';\nimport Formulaire from './components/Pages/Formulaire';\nimport HomePage from './components/Pages/HomePage';\nimport SuggestionPlaylist from './components/SuggestionPlaylist';\nimport DeezeflowPlaylists from './components/DeezeflowPlaylists';\nimport MyPlaylist from './components/MyPlaylist';\nimport ColorThemeContext from './Contexts/ColorThemeContext';\nimport StartQuestionnaireContext from './Contexts/StartQuestionnaire';\nimport PlayerContext from './Contexts/PlayerContext';\nimport './font.css';\nimport { useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [myMood, setMymood] = useState();\n  const [step, setStep] = useState(0);\n  const [savedMood, setSavedMood] = useState('');\n  const [currentTracklist, setCurrentTracklist] = useState();\n  const [myColorTheme, setMyColorTheme] = useState();\n\n  function resetStep() {\n    setStep(0);\n  } // Référence vers l'élément DOM audio.\n  // Permet d'appeler play, pause et de tracker le temps de la musique\n\n\n  const currentTrackElm = useRef(); // Hack pour pouvoir garder la musique courante à jour\n  // dans les callbacks des listeners (addEventListener)\n\n  const currentTrackRef = useRef(tracks[0]); // La musique en cours\n\n  const [currentTrack, _setCurrentTrack] = useState(tracks[0]); // Le temps de la musique en cours\n\n  const [currentTime, setCurrentTime] = useState(0); // Est-ce que la musique en cours défile ?\n\n  const [isPlaying, setIsPlaying] = useState(true); // Change la vue du lecteur (petit ou grand)\n\n  const [isDisplayOff, setIsDisplayOff] = useState(false);\n  /**\n   * Si la playlist change (tracks), on la joue automatiquement\n   * et on lance la première musique.\n   */\n\n  useEffect(() => {\n    setIsPlaying(true);\n    setCurrentTrack(tracks[0]);\n  }, [tracks]);\n  /**\n   * Lorsque l'élément DOM audio est set, on l'initialise\n   */\n\n  useEffect(() => {\n    // Si l'élément DOM n'est pas encore accessible, on sort\n    if (!currentTrackElm.current) {\n      return;\n    } // Callback pour traquer le temps passé\n\n\n    const onTimeUpdate = () => {\n      setCurrentTime(currentTrackElm.current.currentTime);\n    }; // Callback pour savoir lorsque la musique est finie\n\n\n    const onTimeEnded = () => {\n      changeTrack(1);\n    }; // Ajout des listeners\n\n\n    currentTrackElm.current.addEventListener('timeupdate', onTimeUpdate);\n    currentTrackElm.current.addEventListener('ended', onTimeEnded); // Fonction exécutée lorsque le composant est démonté (détruit)\n\n    return () => {\n      // Si l'élément DOM à été initialisé, on retire ses event listener\n      if (currentTrackElm.current) {\n        currentTrackElm.current.removeEventListener('timeupdate', onTimeUpdate);\n        currentTrackElm.current.removeEventListener('ended', onTimeEnded);\n      }\n    };\n  }, [currentTrackElm.current]);\n  /**\n   * Lorsque la musique en cours change, on la charge (load)\n   * puis si le lecteur était en cours de lecture, on lance play()\n   */\n\n  useEffect(() => {\n    if (!currentTrack) {\n      return;\n    }\n\n    currentTrackElm.current.load();\n\n    if (isPlaying) {\n      play();\n    }\n  }, [currentTrack]);\n  /**\n   * Cette fonction nous permet de garder currentTrackRef.current et\n   * currentTrack synchronisés.\n   */\n\n  function setCurrentTrack(track) {\n    currentTrackRef.current = track;\n\n    _setCurrentTrack(track);\n  }\n  /**\n   * Joue la musique courante\n   */\n\n\n  function play() {\n    currentTrackElm.current.play();\n    setIsPlaying(true);\n  }\n  /**\n   * Met la musique courante en pause\n   */\n\n\n  function pause() {\n    currentTrackElm.current.pause();\n    setIsPlaying(false);\n  }\n  /**\n   * Change de musique selon la direction :\n   * 1 = avance\n   * -1 = recule\n   */\n\n\n  function changeTrack(direction = 1) {\n    // On récupère l'index de la musique suivante\n    const nextTrackIndex = tracks.indexOf(currentTrackRef.current) + direction; // Si l'index de la prochaine musique n'est pas dans la range du tableau tracks,\n    // on ne fait rien.\n\n    if (nextTrackIndex < 0 || nextTrackIndex === tracks.length) {\n      return;\n    } // On reset le temps de la musique courante\n\n\n    currentTrackElm.current.currentTime = 0; // On définit la prochaine musique\n\n    setCurrentTrack(tracks[nextTrackIndex]);\n  }\n\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: {\n      setCurrentTrack: setCurrentTrack,\n      currentTrackElm: currentTrackElm,\n      currentTrackRef: currentTrackRef,\n      currentTrack: currentTrack,\n      _setCurrentTrack: _setCurrentTrack,\n      currentTime: currentTime,\n      setCurrentTime: setCurrentTime,\n      isPlaying: isPlaying,\n      setIsPlaying: setIsPlaying,\n      isDisplayOff: isDisplayOff,\n      setIsDisplayOff: setIsDisplayOff,\n      onTimeUpdate: onTimeUpdate,\n      onTimeEnded: onTimeEnded,\n      play: play,\n      pause: pause,\n      changeTrack: changeTrack\n    },\n    children: /*#__PURE__*/_jsxDEV(StartQuestionnaireContext.Provider, {\n      value: {\n        myMood: myMood,\n        setMymood: setMymood,\n        step: step,\n        setStep: setStep,\n        resetStep: resetStep,\n        savedMood: savedMood,\n        setSavedMood: setSavedMood\n      },\n      children: /*#__PURE__*/_jsxDEV(ColorThemeContext.Provider, {\n        value: {\n          myColorTheme: myColorTheme,\n          setMyColorTheme: setMyColorTheme\n        },\n        children: /*#__PURE__*/_jsxDEV(Router, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"App\",\n            children: [/*#__PURE__*/_jsxDEV(Header, {\n              setMyColorTheme: setMyColorTheme\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(Routes, {\n              children: [/*#__PURE__*/_jsxDEV(Route, {\n                exact: true,\n                path: \"/\",\n                element: /*#__PURE__*/_jsxDEV(HomePage, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 191,\n                  columnNumber: 39\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 191,\n                columnNumber: 8\n              }, this), /*#__PURE__*/_jsxDEV(Route, {\n                path: \"/form\",\n                element: /*#__PURE__*/_jsxDEV(Formulaire, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 192,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 8\n              }, this), /*#__PURE__*/_jsxDEV(Route, {\n                path: \"/suggests\",\n                element: /*#__PURE__*/_jsxDEV(SuggestionPlaylist, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 193,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 193,\n                columnNumber: 8\n              }, this), /*#__PURE__*/_jsxDEV(Route, {\n                path: \"/deezeflow-playlists\",\n                element: /*#__PURE__*/_jsxDEV(DeezeflowPlaylists, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 194,\n                  columnNumber: 52\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 194,\n                columnNumber: 8\n              }, this), /*#__PURE__*/_jsxDEV(Route, {\n                path: \"/my-playlist/:id\",\n                element: /*#__PURE__*/_jsxDEV(MyPlaylist, {\n                  onSendingForPlayer: tracklist => {\n                    setCurrentTracklist(tracklist);\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 198,\n                  columnNumber: 10\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 195,\n                columnNumber: 8\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 7\n            }, this), currentTracklist && /*#__PURE__*/_jsxDEV(Player, {\n              className: \"player\",\n              tracks: currentTracklist\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 28\n            }, this), /*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 7\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 6\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 4\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 3\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"Zd2h0mo0avZxO2zaorkvVAhgd7E=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/cab/deezflow/src/App.jsx"],"names":["useState","BrowserRouter","Router","Route","Routes","Navbar","Player","Header","Formulaire","HomePage","SuggestionPlaylist","DeezeflowPlaylists","MyPlaylist","ColorThemeContext","StartQuestionnaireContext","PlayerContext","useRef","App","myMood","setMymood","step","setStep","savedMood","setSavedMood","currentTracklist","setCurrentTracklist","myColorTheme","setMyColorTheme","resetStep","currentTrackElm","currentTrackRef","tracks","currentTrack","_setCurrentTrack","currentTime","setCurrentTime","isPlaying","setIsPlaying","isDisplayOff","setIsDisplayOff","useEffect","setCurrentTrack","current","onTimeUpdate","onTimeEnded","changeTrack","addEventListener","removeEventListener","load","play","track","pause","direction","nextTrackIndex","indexOf","length","tracklist"],"mappings":"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","sourcesContent":["import { useState } from 'react';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\n\nimport Navbar from './components/Navbar/Navbar';\nimport Player from './components/Player';\nimport Header from './components/header';\nimport Formulaire from './components/Pages/Formulaire';\nimport HomePage from './components/Pages/HomePage';\nimport SuggestionPlaylist from './components/SuggestionPlaylist';\nimport DeezeflowPlaylists from './components/DeezeflowPlaylists';\nimport MyPlaylist from './components/MyPlaylist';\nimport ColorThemeContext from './Contexts/ColorThemeContext';\nimport StartQuestionnaireContext from './Contexts/StartQuestionnaire';\nimport PlayerContext from './Contexts/PlayerContext';\nimport './font.css';\nimport { useRef } from 'react';\nfunction App() {\n  const [ myMood, setMymood ] = useState();\n\tconst [ step, setStep ] = useState(0);\n\tconst [ savedMood, setSavedMood ] = useState('');\n\tconst [ currentTracklist, setCurrentTracklist ] = useState();\n\tconst [ myColorTheme, setMyColorTheme ] = useState();\n\n\tfunction resetStep() {\n\t\tsetStep(0);\n\t}\n\n\n\n  // Référence vers l'élément DOM audio.\n  // Permet d'appeler play, pause et de tracker le temps de la musique\n  const currentTrackElm = useRef();\n\n  // Hack pour pouvoir garder la musique courante à jour\n  // dans les callbacks des listeners (addEventListener)\n  const currentTrackRef = useRef(tracks[0]);\n\n  // La musique en cours\n  const [currentTrack, _setCurrentTrack] = useState(tracks[0]);\n\n  // Le temps de la musique en cours\n  const [currentTime, setCurrentTime] = useState(0);\n\n  // Est-ce que la musique en cours défile ?\n  const [isPlaying, setIsPlaying] = useState(true);\n\n  // Change la vue du lecteur (petit ou grand)\n  const [isDisplayOff, setIsDisplayOff] = useState(false);\n\n  /**\n   * Si la playlist change (tracks), on la joue automatiquement\n   * et on lance la première musique.\n   */\n  useEffect(() => {\n    setIsPlaying(true);\n    setCurrentTrack(tracks[0]);\n  }, [tracks])\n\n  /**\n   * Lorsque l'élément DOM audio est set, on l'initialise\n   */\n  useEffect(() => {\n    // Si l'élément DOM n'est pas encore accessible, on sort\n    if (!currentTrackElm.current) {\n      return;\n    }\n\n    // Callback pour traquer le temps passé\n    const onTimeUpdate = () => {\n      setCurrentTime(currentTrackElm.current.currentTime);\n    };\n\n    // Callback pour savoir lorsque la musique est finie\n    const onTimeEnded = () => {\n      changeTrack(1);\n    };\n\n    // Ajout des listeners\n    currentTrackElm.current.addEventListener('timeupdate', onTimeUpdate);\n    currentTrackElm.current.addEventListener('ended', onTimeEnded);\n\n    // Fonction exécutée lorsque le composant est démonté (détruit)\n    return () => {\n      // Si l'élément DOM à été initialisé, on retire ses event listener\n      if (currentTrackElm.current) {\n        currentTrackElm.current.removeEventListener('timeupdate', onTimeUpdate);\n        currentTrackElm.current.removeEventListener('ended', onTimeEnded);\n      }\n    };\n  }, [currentTrackElm.current]);\n\n  /**\n   * Lorsque la musique en cours change, on la charge (load)\n   * puis si le lecteur était en cours de lecture, on lance play()\n   */\n  useEffect(() => {\n    if (!currentTrack) {\n      return;\n    }\n\n    currentTrackElm.current.load();\n\n    if (isPlaying) {\n      play();\n    }\n  }, [currentTrack]);\n\n  /**\n   * Cette fonction nous permet de garder currentTrackRef.current et\n   * currentTrack synchronisés.\n   */\n  function setCurrentTrack(track) {\n    currentTrackRef.current = track;\n    _setCurrentTrack(track);\n  }\n\n  /**\n   * Joue la musique courante\n   */\n  function play() {\n    currentTrackElm.current.play();\n    setIsPlaying(true);\n  }\n\n  /**\n   * Met la musique courante en pause\n   */\n  function pause() {\n    currentTrackElm.current.pause();\n    setIsPlaying(false);\n  }\n\n  /**\n   * Change de musique selon la direction :\n   * 1 = avance\n   * -1 = recule\n   */\n  function changeTrack(direction = 1) {\n    // On récupère l'index de la musique suivante\n    const nextTrackIndex = tracks.indexOf(currentTrackRef.current) + direction;\n\n    // Si l'index de la prochaine musique n'est pas dans la range du tableau tracks,\n    // on ne fait rien.\n    if (nextTrackIndex < 0 || nextTrackIndex === tracks.length) {\n      return;\n    }\n\n    // On reset le temps de la musique courante\n    currentTrackElm.current.currentTime = 0;\n\n    // On définit la prochaine musique\n    setCurrentTrack(tracks[nextTrackIndex]);\n  }\n\n\treturn (\n    <PlayerContext.Provider value={{\n      setCurrentTrack: setCurrentTrack,\n      currentTrackElm: currentTrackElm,\n      currentTrackRef: currentTrackRef,\n      currentTrack: currentTrack,\n      _setCurrentTrack: _setCurrentTrack,\n      currentTime:currentTime,\n      setCurrentTime:setCurrentTime,\n      isPlaying:isPlaying,\n      setIsPlaying:setIsPlaying,\n      isDisplayOff:isDisplayOff,\n      setIsDisplayOff:setIsDisplayOff,\n      onTimeUpdate:onTimeUpdate,\n      onTimeEnded:onTimeEnded,\n      play:play,\n      pause:pause,\n      changeTrack:changeTrack\n    }}>\n\t\t<StartQuestionnaireContext.Provider\n\t\t\tvalue={{\n        myMood: myMood,\n        setMymood: setMymood,\n\t\t\t\tstep: step,\n\t\t\t\tsetStep: setStep,\n\t\t\t\tresetStep: resetStep,\n\t\t\t\tsavedMood: savedMood,\n\t\t\t\tsetSavedMood: setSavedMood\n\t\t\t}}\n\t\t>\n\t\t\t<ColorThemeContext.Provider value={{ myColorTheme: myColorTheme, setMyColorTheme: setMyColorTheme }}>\n\t\t\t\t<Router>\n\t\t\t\t\t<div className=\"App\">\n\t\t\t\t\t\t<Header setMyColorTheme={setMyColorTheme} />\n\n\t\t\t\t\t\t<Routes>\n\t\t\t\t\t\t\t<Route exact path=\"/\" element={<HomePage />} />\n\t\t\t\t\t\t\t<Route path=\"/form\" element={<Formulaire />} />\n\t\t\t\t\t\t\t<Route path=\"/suggests\" element={<SuggestionPlaylist />} />\n\t\t\t\t\t\t\t<Route path=\"/deezeflow-playlists\" element={<DeezeflowPlaylists />} />\n\t\t\t\t\t\t\t<Route\n\t\t\t\t\t\t\t\tpath=\"/my-playlist/:id\"\n\t\t\t\t\t\t\t\telement={\n\t\t\t\t\t\t\t\t\t<MyPlaylist\n\t\t\t\t\t\t\t\t\t\tonSendingForPlayer={(tracklist) => {\n\t\t\t\t\t\t\t\t\t\t\tsetCurrentTracklist(tracklist);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Routes>\n\n\t\t\t\t\t\t{currentTracklist && <Player className=\"player\" tracks={currentTracklist} />}\n\n\t\t\t\t\t\t<Navbar />\n\t\t\t\t\t</div>\n\t\t\t\t</Router>\n\t\t\t</ColorThemeContext.Provider>\n\t\t</StartQuestionnaireContext.Provider>\n    </PlayerContext.Provider>\n\t);\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}