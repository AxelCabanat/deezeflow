{"ast":null,"code":"var _jsxFileName = \"/home/cab/deezflow/src/components/MyPlaylist.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MyPlaylist = _ref => {\n  _s();\n\n  let {\n    myPlaylistId,\n    onSendingForPlayer = () => {}\n  } = _ref;\n  const [myPlaylist, setMyPlaylist] = useState([]);\n  useEffect(() => {\n    fetch(`http://localhost:3001/playlist/${myPlaylistId}`).then(response => response.json()).then(data => setMyPlaylist(data.tracks.data.map(track => ({\n      bigPicture: track.album.cover_big,\n      smallPicture: track.album.cover_small,\n      title: track.title,\n      artist: track.artist.name,\n      track: track.preview\n    }))));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        onSendingForPlayer(myPlaylist);\n      },\n      children: \"PLAY\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: myPlaylist.map(track => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: track.smallPicture,\n          alt: \"cover\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, this), track.title, \" - \", track.artist]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MyPlaylist, \"K0J57km9hr2XBLh93kEZhGO1pzw=\");\n\n_c = MyPlaylist;\nexport default MyPlaylist;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyPlaylist\");","map":{"version":3,"sources":["/home/cab/deezflow/src/components/MyPlaylist.jsx"],"names":["useState","useEffect","MyPlaylist","myPlaylistId","onSendingForPlayer","myPlaylist","setMyPlaylist","fetch","then","response","json","data","tracks","map","track","bigPicture","album","cover_big","smallPicture","cover_small","title","artist","name","preview"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;;AAEA,MAAMC,UAAU,GAAG,QAAqD;AAAA;;AAAA,MAApD;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA,kBAAkB,GAAG,MAAM,CAAE;AAA7C,GAAoD;AACtE,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BN,QAAQ,CAAC,EAAD,CAA5C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,KAAK,CAAE,kCAAiCJ,YAAa,EAAhD,CAAL,CACGK,IADH,CACSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADtB,EAEGF,IAFH,CAESG,IAAD,IACJL,aAAa,CACXK,IAAI,CAACC,MAAL,CAAYD,IAAZ,CAAiBE,GAAjB,CAAsBC,KAAD,KAAY;AAC/BC,MAAAA,UAAU,EAAED,KAAK,CAACE,KAAN,CAAYC,SADO;AAE/BC,MAAAA,YAAY,EAAEJ,KAAK,CAACE,KAAN,CAAYG,WAFK;AAG/BC,MAAAA,KAAK,EAAEN,KAAK,CAACM,KAHkB;AAI/BC,MAAAA,MAAM,EAAEP,KAAK,CAACO,MAAN,CAAaC,IAJU;AAK/BR,MAAAA,KAAK,EAAEA,KAAK,CAACS;AALkB,KAAZ,CAArB,CADW,CAHjB;AAaD,GAdQ,EAcN,EAdM,CAAT;AAgBA,sBACE;AAAA,4BACE;AACE,MAAA,OAAO,EAAE,MAAM;AACbnB,QAAAA,kBAAkB,CAACC,UAAD,CAAlB;AACD,OAHH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eASE;AAAA,gBACGA,UAAU,CAACQ,GAAX,CAAgBC,KAAD,iBACd;AAAA,gCACE;AAAK,UAAA,GAAG,EAAEA,KAAK,CAACI,YAAhB;AAA8B,UAAA,GAAG,EAAC;AAAlC;AAAA;AAAA;AAAA;AAAA,gBADF,EAEGJ,KAAK,CAACM,KAFT,SAEmBN,KAAK,CAACO,MAFzB;AAAA;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YATF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD,CAvCD;;GAAMnB,U;;KAAAA,U;AAyCN,eAAeA,UAAf","sourcesContent":["import { useState, useEffect } from 'react';\n\nconst MyPlaylist = ({ myPlaylistId, onSendingForPlayer = () => {} }) => {\n  const [myPlaylist, setMyPlaylist] = useState([]);\n\n  useEffect(() => {\n    fetch(`http://localhost:3001/playlist/${myPlaylistId}`)\n      .then((response) => response.json())\n      .then((data) =>\n        setMyPlaylist(\n          data.tracks.data.map((track) => ({\n            bigPicture: track.album.cover_big,\n            smallPicture: track.album.cover_small,\n            title: track.title,\n            artist: track.artist.name,\n            track: track.preview,\n          }))\n        )\n      );\n  }, []);\n\n  return (\n    <div>\n      <button\n        onClick={() => {\n          onSendingForPlayer(myPlaylist);\n        }}\n      >\n        PLAY\n      </button>\n\n      <ul>\n        {myPlaylist.map((track) => (\n          <li>\n            <img src={track.smallPicture} alt=\"cover\" /> \n            {track.title} - {track.artist}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default MyPlaylist;\n"]},"metadata":{},"sourceType":"module"}