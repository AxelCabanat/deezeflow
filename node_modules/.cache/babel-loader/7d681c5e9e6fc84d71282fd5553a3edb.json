{"ast":null,"code":"var _jsxFileName = \"/home/cab/deezflow/src/components/Player.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useRef } from 'react';\nimport Slider from 'rc-slider';\nimport album from '../assets/album.jpg';\nimport 'rc-slider/assets/index.css';\nimport '../player.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction msToTime(s) {\n  let sec = parseInt(s, 10); // Pad to 2 or 3 digits, default is 2\n\n  function pad(n, z) {\n    const v = z || 2;\n    return `00${n}`.slice(-v);\n  }\n\n  const secs = sec % 60;\n  sec = (sec - secs) / 60;\n  const mins = sec % 60;\n  return `${pad(mins)}:${pad(secs)}`;\n}\n\nfunction Player(_ref) {\n  _s();\n\n  let {\n    tracks\n  } = _ref;\n  const audioElements = useRef([]);\n  const [currentPlayingTrack, setCurrentPlayingTrack] = useState(0);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isAutoPlaying, setIsAutoPlaying] = useState(false);\n  const [isEnded, setIsEnded] = useState(false);\n  const [isDisplayOff, setIsDisplayOff] = useState(false);\n  /**\n   * Retourne une référence vers l'élément DOM de la chanson\n   * en cours\n   */\n\n  function getCurrentAudioElement() {\n    return audioElements.current[currentPlayingTrack];\n  }\n\n  function pause() {\n    getCurrentAudioElement().pause();\n    setIsPlaying(false);\n  }\n\n  function stop() {\n    pause();\n    getCurrentAudioElement().currentTime = 0;\n  }\n\n  const onTimeUpdate = () => {\n    setCurrentTime(getCurrentAudioElement().currentTime);\n  };\n  /**\n   * A la fin de la chanson change la musique\n   */\n\n\n  const onEnded = () => {\n    setIsEnded(true);\n  };\n\n  function getDuration() {\n    return getCurrentAudioElement() ? getCurrentAudioElement().duration : 0;\n  }\n\n  function play() {\n    getCurrentAudioElement().play();\n    setIsPlaying(true);\n  }\n\n  function changeTrack(direction) {\n    if (direction === -1 && currentPlayingTrack === 0 || direction === 1 && currentPlayingTrack === audioElements.current.length - 1) {\n      return;\n    }\n\n    setIsEnded(false);\n    setIsAutoPlaying(isPlaying);\n    stop();\n    setCurrentPlayingTrack(currentPlayingTrack + direction);\n  }\n\n  function onSliderClick(time) {\n    setCurrentTime(time);\n    getCurrentAudioElement().currentTime = time;\n  }\n\n  useEffect(() => {\n    getCurrentAudioElement().addEventListener('timeupdate', onTimeUpdate);\n    getCurrentAudioElement().addEventListener('ended', onEnded);\n\n    if (isAutoPlaying) {\n      play();\n    }\n  }, [currentPlayingTrack]);\n  useEffect(() => {\n    if (isEnded) {\n      changeTrack(1);\n    }\n  }, [isEnded]);\n\n  const triggerToggle = () => {\n    setIsDisplayOff(!isDisplayOff);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `player ${!isDisplayOff ? 'isDisplayOff-checked' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playerBlock\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        onClick: () => triggerToggle(),\n        className: \"icon-arrow\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: album,\n          alt: \"Pochette de l'album\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"globalPlayer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"titlePlayer\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"title-track\",\n          children: \"Killing in the name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"singer\",\n          children: \"Rage Against the Machine\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Slider, {\n        value: currentTime,\n        max: getDuration(),\n        onChange: onSliderClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"blockTime\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: msToTime(currentTime)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: msToTime(getDuration())\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"blockPlayer\",\n        children: [tracks.map((track, i) => /*#__PURE__*/_jsxDEV(\"audio\", {\n          ref: element => {\n            audioElements.current[i] = element.track;\n          },\n          children: /*#__PURE__*/_jsxDEV(\"source\", {\n            src: track\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"buttonPlayer\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"prev\",\n            \"aria-label\": \"Previous\",\n            onClick: () => changeTrack(-1),\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                class: \"icon-next\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 13\n          }, this), isPlaying ? /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"pause\",\n            onClick: pause,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                class: \"icon-pause\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"play\",\n            onClick: play,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                class: \"icon-play\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 167,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"next\",\n            \"aria-label\": \"Next\",\n            onClick: () => changeTrack(1),\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                class: \"icon-next\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 179,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Player, \"n+V65MNjcrJHtaJWVsYkUZ3wtXs=\");\n\n_c = Player;\nexport default Player;\n\nvar _c;\n\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"sources":["/home/cab/deezflow/src/components/Player.jsx"],"names":["useState","useEffect","useRef","Slider","album","msToTime","s","sec","parseInt","pad","n","z","v","slice","secs","mins","Player","tracks","audioElements","currentPlayingTrack","setCurrentPlayingTrack","currentTime","setCurrentTime","isPlaying","setIsPlaying","isAutoPlaying","setIsAutoPlaying","isEnded","setIsEnded","isDisplayOff","setIsDisplayOff","getCurrentAudioElement","current","pause","stop","onTimeUpdate","onEnded","getDuration","duration","play","changeTrack","direction","length","onSliderClick","time","addEventListener","triggerToggle","map","track","i","element"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,QAA4C,OAA5C;AAEA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AAEA,OAAO,4BAAP;AACA,OAAO,eAAP;;;AAEA,SAASC,QAAT,CAAkBC,CAAlB,EAAqB;AACnB,MAAIC,GAAG,GAAGC,QAAQ,CAACF,CAAD,EAAI,EAAJ,CAAlB,CADmB,CAGnB;;AACA,WAASG,GAAT,CAAaC,CAAb,EAAgBC,CAAhB,EAAmB;AACjB,UAAMC,CAAC,GAAGD,CAAC,IAAI,CAAf;AACA,WAAQ,KAAID,CAAE,EAAP,CAASG,KAAT,CAAe,CAACD,CAAhB,CAAP;AACD;;AAED,QAAME,IAAI,GAAGP,GAAG,GAAG,EAAnB;AACAA,EAAAA,GAAG,GAAG,CAACA,GAAG,GAAGO,IAAP,IAAe,EAArB;AACA,QAAMC,IAAI,GAAGR,GAAG,GAAG,EAAnB;AAEA,SAAQ,GAAEE,GAAG,CAACM,IAAD,CAAO,IAAGN,GAAG,CAACK,IAAD,CAAO,EAAjC;AACD;;AAED,SAASE,MAAT,OAA4B;AAAA;;AAAA,MAAZ;AAAEC,IAAAA;AAAF,GAAY;AAC1B,QAAMC,aAAa,GAAGhB,MAAM,CAAC,EAAD,CAA5B;AAEA,QAAM,CAACiB,mBAAD,EAAsBC,sBAAtB,IAAgDpB,QAAQ,CAAC,CAAD,CAA9D;AACA,QAAM,CAACqB,WAAD,EAAcC,cAAd,IAAgCtB,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAM,CAACuB,SAAD,EAAYC,YAAZ,IAA4BxB,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACyB,aAAD,EAAgBC,gBAAhB,IAAoC1B,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAAC2B,OAAD,EAAUC,UAAV,IAAwB5B,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAAC6B,YAAD,EAAeC,eAAf,IAAkC9B,QAAQ,CAAC,KAAD,CAAhD;AACA;AACF;AACA;AACA;;AACE,WAAS+B,sBAAT,GAAkC;AAChC,WAAOb,aAAa,CAACc,OAAd,CAAsBb,mBAAtB,CAAP;AACD;;AAED,WAASc,KAAT,GAAiB;AACfF,IAAAA,sBAAsB,GAAGE,KAAzB;AACAT,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;;AAED,WAASU,IAAT,GAAgB;AACdD,IAAAA,KAAK;AACLF,IAAAA,sBAAsB,GAAGV,WAAzB,GAAuC,CAAvC;AACD;;AAED,QAAMc,YAAY,GAAG,MAAM;AACzBb,IAAAA,cAAc,CAACS,sBAAsB,GAAGV,WAA1B,CAAd;AACD,GAFD;AAIA;AACF;AACA;;;AACE,QAAMe,OAAO,GAAG,MAAM;AACpBR,IAAAA,UAAU,CAAC,IAAD,CAAV;AACD,GAFD;;AAIA,WAASS,WAAT,GAAuB;AACrB,WAAON,sBAAsB,KAAKA,sBAAsB,GAAGO,QAA9B,GAAyC,CAAtE;AACD;;AAED,WAASC,IAAT,GAAgB;AACdR,IAAAA,sBAAsB,GAAGQ,IAAzB;AACAf,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;;AAED,WAASgB,WAAT,CAAqBC,SAArB,EAAgC;AAC9B,QACGA,SAAS,KAAK,CAAC,CAAf,IAAoBtB,mBAAmB,KAAK,CAA7C,IACCsB,SAAS,KAAK,CAAd,IACCtB,mBAAmB,KAAKD,aAAa,CAACc,OAAd,CAAsBU,MAAtB,GAA+B,CAH3D,EAIE;AACA;AACD;;AAEDd,IAAAA,UAAU,CAAC,KAAD,CAAV;AACAF,IAAAA,gBAAgB,CAACH,SAAD,CAAhB;AACAW,IAAAA,IAAI;AACJd,IAAAA,sBAAsB,CAACD,mBAAmB,GAAGsB,SAAvB,CAAtB;AACD;;AAED,WAASE,aAAT,CAAuBC,IAAvB,EAA6B;AAC3BtB,IAAAA,cAAc,CAACsB,IAAD,CAAd;AACAb,IAAAA,sBAAsB,GAAGV,WAAzB,GAAuCuB,IAAvC;AACD;;AAED3C,EAAAA,SAAS,CAAC,MAAM;AACd8B,IAAAA,sBAAsB,GAAGc,gBAAzB,CAA0C,YAA1C,EAAwDV,YAAxD;AACAJ,IAAAA,sBAAsB,GAAGc,gBAAzB,CAA0C,OAA1C,EAAmDT,OAAnD;;AAEA,QAAIX,aAAJ,EAAmB;AACjBc,MAAAA,IAAI;AACL;AACF,GAPQ,EAON,CAACpB,mBAAD,CAPM,CAAT;AASAlB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI0B,OAAJ,EAAa;AACXa,MAAAA,WAAW,CAAC,CAAD,CAAX;AACD;AACF,GAJQ,EAIN,CAACb,OAAD,CAJM,CAAT;;AAMA,QAAMmB,aAAa,GAAG,MAAM;AAC1BhB,IAAAA,eAAe,CAAC,CAACD,YAAF,CAAf;AACD,GAFD;;AAIA,sBACE;AAAK,IAAA,SAAS,EAAG,UAAS,CAACA,YAAD,GAAgB,sBAAhB,GAAyC,EAAG,EAAtE;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,8BACE;AAAM,QAAA,OAAO,EAAE,MAAMiB,aAAa,EAAlC;AAAsC,QAAA,SAAS,EAAC;AAAhD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,+BACE;AAAK,UAAA,GAAG,EAAE1C,KAAV;AAAiB,UAAA,GAAG,EAAC;AAArB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAOE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA,gCACE;AAAG,UAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAG,UAAA,SAAS,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAKE,QAAC,MAAD;AACE,QAAA,KAAK,EAAEiB,WADT;AAEE,QAAA,GAAG,EAAEgB,WAAW,EAFlB;AAGE,QAAA,QAAQ,EAAEM;AAHZ;AAAA;AAAA;AAAA;AAAA,cALF,eAWE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,gCACE;AAAA,oBAAItC,QAAQ,CAACgB,WAAD;AAAZ;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,oBAAIhB,QAAQ,CAACgC,WAAW,EAAZ;AAAZ;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAXF,eAgBE;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA,mBACGpB,MAAM,CAAC8B,GAAP,CAAW,CAACC,KAAD,EAAQC,CAAR,kBACV;AACE,UAAA,GAAG,EAAGC,OAAD,IAAa;AAChBhC,YAAAA,aAAa,CAACc,OAAd,CAAsBiB,CAAtB,IAA2BC,OAAO,CAACF,KAAnC;AACD,WAHH;AAAA,iCAKE;AAAQ,YAAA,GAAG,EAAEA;AAAb;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA,gBADD,CADH,eAWE;AAAK,UAAA,SAAS,EAAC,cAAf;AAAA,kCACE;AACE,YAAA,IAAI,EAAC,QADP;AAEE,YAAA,SAAS,EAAC,MAFZ;AAGE,0BAAW,UAHb;AAIE,YAAA,OAAO,EAAE,MAAMR,WAAW,CAAC,CAAC,CAAF,CAJ5B;AAAA,mCAME;AAAA,qCACE;AAAM,gBAAA,KAAK,EAAC;AAAZ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA,kBADF,EAYGjB,SAAS,gBACR;AAAQ,YAAA,SAAS,EAAC,OAAlB;AAA0B,YAAA,OAAO,EAAEU,KAAnC;AAAA,mCACE;AAAA,qCACE;AAAM,gBAAA,KAAK,EAAC;AAAZ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBADQ,gBAOR;AAAQ,YAAA,SAAS,EAAC,MAAlB;AAAyB,YAAA,OAAO,EAAEM,IAAlC;AAAA,mCACE;AAAA,qCACE;AAAM,gBAAA,KAAK,EAAC;AAAZ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBAnBJ,eA0BE;AACE,YAAA,IAAI,EAAC,QADP;AAEE,YAAA,SAAS,EAAC,MAFZ;AAGE,0BAAW,MAHb;AAIE,YAAA,OAAO,EAAE,MAAMC,WAAW,CAAC,CAAD,CAJ5B;AAAA,mCAME;AAAA,qCACE;AAAM,gBAAA,KAAK,EAAC;AAAZ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA,kBA1BF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAXF;AAAA;AAAA;AAAA;AAAA;AAAA,cAhBF;AAAA;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA4ED;;GAlKQxB,M;;KAAAA,M;AAoKT,eAAeA,MAAf","sourcesContent":["import { useState, useEffect, useRef } from 'react';\n\nimport Slider from 'rc-slider';\nimport album from '../assets/album.jpg';\n\nimport 'rc-slider/assets/index.css';\nimport '../player.css';\n\nfunction msToTime(s) {\n  let sec = parseInt(s, 10);\n\n  // Pad to 2 or 3 digits, default is 2\n  function pad(n, z) {\n    const v = z || 2;\n    return `00${n}`.slice(-v);\n  }\n\n  const secs = sec % 60;\n  sec = (sec - secs) / 60;\n  const mins = sec % 60;\n\n  return `${pad(mins)}:${pad(secs)}`;\n}\n\nfunction Player({ tracks }) {\n  const audioElements = useRef([]);\n\n  const [currentPlayingTrack, setCurrentPlayingTrack] = useState(0);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isAutoPlaying, setIsAutoPlaying] = useState(false);\n  const [isEnded, setIsEnded] = useState(false);\n  const [isDisplayOff, setIsDisplayOff] = useState(false);\n  /**\n   * Retourne une référence vers l'élément DOM de la chanson\n   * en cours\n   */\n  function getCurrentAudioElement() {\n    return audioElements.current[currentPlayingTrack];\n  }\n\n  function pause() {\n    getCurrentAudioElement().pause();\n    setIsPlaying(false);\n  }\n\n  function stop() {\n    pause();\n    getCurrentAudioElement().currentTime = 0;\n  }\n\n  const onTimeUpdate = () => {\n    setCurrentTime(getCurrentAudioElement().currentTime);\n  };\n\n  /**\n   * A la fin de la chanson change la musique\n   */\n  const onEnded = () => {\n    setIsEnded(true);\n  };\n\n  function getDuration() {\n    return getCurrentAudioElement() ? getCurrentAudioElement().duration : 0;\n  }\n\n  function play() {\n    getCurrentAudioElement().play();\n    setIsPlaying(true);\n  }\n\n  function changeTrack(direction) {\n    if (\n      (direction === -1 && currentPlayingTrack === 0) ||\n      (direction === 1 &&\n        currentPlayingTrack === audioElements.current.length - 1)\n    ) {\n      return;\n    }\n\n    setIsEnded(false);\n    setIsAutoPlaying(isPlaying);\n    stop();\n    setCurrentPlayingTrack(currentPlayingTrack + direction);\n  }\n\n  function onSliderClick(time) {\n    setCurrentTime(time);\n    getCurrentAudioElement().currentTime = time;\n  }\n\n  useEffect(() => {\n    getCurrentAudioElement().addEventListener('timeupdate', onTimeUpdate);\n    getCurrentAudioElement().addEventListener('ended', onEnded);\n\n    if (isAutoPlaying) {\n      play();\n    }\n  }, [currentPlayingTrack]);\n\n  useEffect(() => {\n    if (isEnded) {\n      changeTrack(1);\n    }\n  }, [isEnded]);\n\n  const triggerToggle = () => {\n    setIsDisplayOff(!isDisplayOff);\n  };\n\n  return (\n    <div className={`player ${!isDisplayOff ? 'isDisplayOff-checked' : ''}`}>\n      <div className=\"playerBlock\">\n        <span onClick={() => triggerToggle()} className=\"icon-arrow\"></span>\n        <div>\n          <img src={album} alt=\"Pochette de l'album\" />\n        </div>\n      </div>\n      <div className=\"globalPlayer\">\n        <div className=\"titlePlayer\">\n          <p className=\"title-track\">Killing in the name</p>\n          <p className=\"singer\">Rage Against the Machine</p>\n        </div>\n        <Slider\n          value={currentTime}\n          max={getDuration()}\n          onChange={onSliderClick}\n        />\n\n        <div className=\"blockTime\">\n          <p>{msToTime(currentTime)}</p>\n          <p>{msToTime(getDuration())}</p>\n        </div>\n\n        <div className=\"blockPlayer\">\n          {tracks.map((track, i) => (\n            <audio\n              ref={(element) => {\n                audioElements.current[i] = element.track;\n              }}\n            >\n              <source src={track} />\n            </audio>\n          ))}\n\n          <div className=\"buttonPlayer\">\n            <button\n              type=\"button\"\n              className=\"prev\"\n              aria-label=\"Previous\"\n              onClick={() => changeTrack(-1)}\n            >\n              <div>\n                <span class=\"icon-next\"></span>\n              </div>\n            </button>\n\n            {isPlaying ? (\n              <button className=\"pause\" onClick={pause}>\n                <div>\n                  <span class=\"icon-pause\"></span>\n                </div>\n              </button>\n            ) : (\n              <button className=\"play\" onClick={play}>\n                <div>\n                  <span class=\"icon-play\"></span>\n                </div>\n              </button>\n            )}\n\n            <button\n              type=\"button\"\n              className=\"next\"\n              aria-label=\"Next\"\n              onClick={() => changeTrack(1)}\n            >\n              <div>\n                <span class=\"icon-next\"></span>\n              </div>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Player;\n"]},"metadata":{},"sourceType":"module"}