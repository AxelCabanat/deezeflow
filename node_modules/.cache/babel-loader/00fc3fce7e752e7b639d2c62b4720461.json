{"ast":null,"code":"var _jsxFileName = \"/home/cab/deezflow/src/Contexts/PlayerContextProvider.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport PlayerContext from \"./PlayerContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction PlayerContextProvider({\n  children\n}) {\n  _s();\n\n  // Playlist\n  const [tracks, setTracks] = useState([]); // Musique en cours\n\n  const [currentTrack, setCurrentTrack] = useState(); // Est-ce que la musique en cours défile ?\n\n  const [isPlaying, setIsPlaying] = useState(false); // Définit la première musique quand la playlist change\n\n  useEffect(() => {\n    if (tracks && tracks.length > 0) {\n      setCurrentTrack(tracks[0]);\n    }\n  }, [tracks]);\n  /**\n    * Change de musique selon la direction :\n    * 1 = avance\n    * -1 = recule\n    */\n\n  function changeTrack(direction = 1) {\n    // On récupère l'index de la musique suivante\n    const nextTrackIndex = tracks.indexOf(currentTrack) + direction; // Si l'index de la prochaine musique n'est pas dans la range du tableau tracks,\n    // on ne fait rien.\n\n    if (nextTrackIndex < 0 || nextTrackIndex === tracks.length) {\n      return;\n    } // On définit la prochaine musique\n\n\n    setCurrentTrack(tracks[nextTrackIndex]);\n  }\n\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: {\n      tracks,\n      setTracks,\n      currentTrack,\n      setCurrentTrack,\n      isPlaying,\n      setIsPlaying,\n      changeTrack\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PlayerContextProvider, \"ikUZ0vRueUzq33ug58uU0+9nnHA=\");\n\n_c = PlayerContextProvider;\nexport default PlayerContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlayerContextProvider\");","map":{"version":3,"sources":["/home/cab/deezflow/src/Contexts/PlayerContextProvider.js"],"names":["useState","useEffect","PlayerContext","PlayerContextProvider","children","tracks","setTracks","currentTrack","setCurrentTrack","isPlaying","setIsPlaying","length","changeTrack","direction","nextTrackIndex","indexOf"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,aAAP,MAA0B,iBAA1B;;;AAEA,SAASC,qBAAT,CAA+B;AAAEC,EAAAA;AAAF,CAA/B,EAA6C;AAAA;;AAC3C;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,EAAD,CAApC,CAF2C,CAI3C;;AACA,QAAM,CAACO,YAAD,EAAeC,eAAf,IAAkCR,QAAQ,EAAhD,CAL2C,CAO3C;;AACA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,KAAD,CAA1C,CAR2C,CAU3C;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAII,MAAM,IAAIA,MAAM,CAACM,MAAP,GAAgB,CAA9B,EAAiC;AAC/BH,MAAAA,eAAe,CAACH,MAAM,CAAC,CAAD,CAAP,CAAf;AACD;AACF,GAJQ,EAIN,CAACA,MAAD,CAJM,CAAT;AAMD;AACD;AACA;AACA;AACA;;AACC,WAASO,WAAT,CAAqBC,SAAS,GAAG,CAAjC,EAAoC;AACnC;AACA,UAAMC,cAAc,GAAGT,MAAM,CAACU,OAAP,CAAeR,YAAf,IAA+BM,SAAtD,CAFmC,CAInC;AACA;;AACA,QAAIC,cAAc,GAAG,CAAjB,IAAsBA,cAAc,KAAKT,MAAM,CAACM,MAApD,EAA4D;AAC3D;AACA,KARkC,CAUnC;;;AACAH,IAAAA,eAAe,CAACH,MAAM,CAACS,cAAD,CAAP,CAAf;AACA;;AAEA,sBACE,QAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AAC7BT,MAAAA,MAD6B;AAE7BC,MAAAA,SAF6B;AAG7BC,MAAAA,YAH6B;AAI7BC,MAAAA,eAJ6B;AAK7BC,MAAAA,SAL6B;AAM7BC,MAAAA,YAN6B;AAO7BE,MAAAA;AAP6B,KAA/B;AAAA,cASGR;AATH;AAAA;AAAA;AAAA;AAAA,UADF;AAaD;;GAjDQD,qB;;KAAAA,qB;AAmDT,eAAeA,qBAAf","sourcesContent":["import { useState, useEffect } from \"react\";\nimport PlayerContext from \"./PlayerContext\";\n\nfunction PlayerContextProvider({ children }) {\n  // Playlist\n  const [tracks, setTracks] = useState([]);\n\n  // Musique en cours\n  const [currentTrack, setCurrentTrack] = useState();\n\n  // Est-ce que la musique en cours défile ?\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  // Définit la première musique quand la playlist change\n  useEffect(() => {\n    if (tracks && tracks.length > 0) {\n      setCurrentTrack(tracks[0]);\n    }\n  }, [tracks])\n\n\t/**\n   * Change de musique selon la direction :\n   * 1 = avance\n   * -1 = recule\n   */\n\tfunction changeTrack(direction = 1) {\n\t\t// On récupère l'index de la musique suivante\n\t\tconst nextTrackIndex = tracks.indexOf(currentTrack) + direction;\n\n\t\t// Si l'index de la prochaine musique n'est pas dans la range du tableau tracks,\n\t\t// on ne fait rien.\n\t\tif (nextTrackIndex < 0 || nextTrackIndex === tracks.length) {\n\t\t\treturn;\n\t\t}\n\n\t\t// On définit la prochaine musique\n\t\tsetCurrentTrack(tracks[nextTrackIndex]);\n\t}\n\n  return (\n    <PlayerContext.Provider value={{\n      tracks,\n      setTracks,\n      currentTrack,\n      setCurrentTrack,\n      isPlaying,\n      setIsPlaying,\n      changeTrack,\n    }}>\n      {children}\n    </PlayerContext.Provider>\n  )\n}\n\nexport default PlayerContextProvider;"]},"metadata":{},"sourceType":"module"}