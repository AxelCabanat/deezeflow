{"ast":null,"code":"var _jsxFileName = \"/home/cab/deezflow/src/components/Player.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useRef, useContext } from 'react';\nimport ColorThemeContext from '../Contexts/ColorThemeContext';\nimport Slider from 'rc-slider';\nimport PlayerContext from '../Contexts/PlayerContext';\nimport 'rc-slider/assets/index.css';\nimport '../player.css';\n/**\n * Converti des secondes au format MM:SS\n *\n * @param {Number} seconds\n *\n * @returns String\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst secondsToMMSS = seconds => new Date(Math.round(seconds) * 1000).toISOString().substr(14, 5);\n\nfunction Player() {\n  _s();\n\n  const {\n    tracks,\n    currentTrack,\n    setCurrentTrack: _setCurrentTrack,\n    isPlaying,\n    setIsPlaying\n  } = useContext(PlayerContext);\n  const {\n    myColorTheme\n  } = useContext(ColorThemeContext); // Si on a pas de musiques, on n'affiche pas le player\n\n  if (!tracks || tracks.length === 0 || !currentTrack) {\n    return null;\n  } // Référence vers l'élément DOM audio.\n  // Permet d'appeler play, pause et de tracker le temps de la musique\n\n\n  const currentTrackElm = useRef(); // Hack pour pouvoir garder la musique courante à jour\n  // dans les callbacks des listeners (addEventListener)\n\n  const currentTrackRef = useRef(tracks[0]); // Le temps de la musique en cours\n\n  const [currentTime, setCurrentTime] = useState(0); // Change la vue du lecteur (petit ou grand)\n\n  const [isDisplayOff, setIsDisplayOff] = useState(false);\n  /**\n    * Si la playlist change (tracks), on la joue automatiquement\n    * et on lance la première musique.\n    */\n\n  useEffect(() => {\n    setIsPlaying(true);\n  }, [tracks]);\n  /**\n    * Lorsque l'élément DOM audio est set, on l'initialise\n    */\n\n  useEffect(() => {\n    // Si l'élément DOM n'est pas encore accessible, on sort\n    if (!currentTrackElm.current) {\n      return;\n    } // Callback pour traquer le temps passé\n\n\n    const onTimeUpdate = () => {\n      setCurrentTime(currentTrackElm.current.currentTime);\n    }; // Callback pour savoir lorsque la musique est finie\n\n\n    const onTimeEnded = () => {\n      changeTrack(1);\n    }; // Ajout des listeners\n\n\n    currentTrackElm.current.addEventListener('timeupdate', onTimeUpdate);\n    currentTrackElm.current.addEventListener('ended', onTimeEnded); // Fonction exécutée lorsque le composant est démonté (détruit)\n\n    return () => {\n      // Si l'élément DOM à été initialisé, on retire ses event listener\n      if (currentTrackElm.current) {\n        currentTrackElm.current.removeEventListener('timeupdate', onTimeUpdate);\n        currentTrackElm.current.removeEventListener('ended', onTimeEnded);\n      }\n    };\n  }, [currentTrackElm.current]);\n  /**\n    * Lorsque la musique en cours change, on la charge (load)\n    * puis si le lecteur était en cours de lecture, on lance play()\n    */\n\n  useEffect(() => {\n    if (!currentTrack) {\n      return;\n    }\n\n    currentTrackElm.current.load();\n\n    if (isPlaying) {\n      play();\n    }\n  }, [currentTrack]);\n  /**\n    * Cette fonction nous permet de garder currentTrackRef.current et\n    * currentTrack synchronisés.\n    */\n\n  function setCurrentTrack(track) {\n    currentTrackRef.current = track;\n\n    _setCurrentTrack(track);\n  }\n  /**\n    * Joue la musique courante\n    */\n\n\n  function play() {\n    currentTrackElm.current.play();\n    setIsPlaying(true);\n  }\n  /**\n    * Met la musique courante en pause\n    */\n\n\n  function pause() {\n    currentTrackElm.current.pause();\n    setIsPlaying(false);\n  }\n  /**\n    * Change de musique selon la direction :\n    * 1 = avance\n    * -1 = recule\n    */\n\n\n  function changeTrack(direction = 1) {\n    // On récupère l'index de la musique suivante\n    const nextTrackIndex = tracks.indexOf(currentTrackRef.current) + direction; // Si l'index de la prochaine musique n'est pas dans la range du tableau tracks,\n    // on ne fait rien.\n\n    if (nextTrackIndex < 0 || nextTrackIndex === tracks.length) {\n      return;\n    } // On reset le temps de la musique courante\n\n\n    currentTrackElm.current.currentTime = 0; // On définit la prochaine musique\n\n    setCurrentTrack(tracks[nextTrackIndex]);\n  }\n  /**\n    * Excécuté lorsque la valeur du slider change\n    * On met à jour le temps courant de la musique courante\n    */\n\n\n  function onSliderChange(time) {\n    currentTrackElm.current.currentTime = time;\n  }\n  /**\n    * Change l'apparence du lecteur\n    */\n\n\n  function triggerToggle() {\n    setIsDisplayOff(!isDisplayOff);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `player ${!isDisplayOff ? 'isDisplayOff-checked' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playerBlock\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        onClick: () => triggerToggle(),\n        className: \"icon-arrow\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: currentTrack.bigPicture,\n          alt: \"Pochette de l'album\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"globalPlayer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"titlePlayer\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"title-track\",\n          children: currentTrack.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"singer\",\n          children: currentTrack.artist\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Slider, {\n        value: currentTime,\n        max: currentTrack.duration,\n        onChange: onSliderChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"blockTime\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: secondsToMMSS(currentTime)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: secondsToMMSS(currentTrack.duration)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"blockPlayer\",\n        children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n          ref: el => currentTrackElm.current = el,\n          children: /*#__PURE__*/_jsxDEV(\"source\", {\n            src: currentTrack.src\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"buttonPlayer\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"prev\",\n            \"aria-label\": \"Previous\",\n            onClick: () => changeTrack(-1),\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"icon-next\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 203,\n                columnNumber: 9\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 8\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 7\n          }, this), isPlaying ? /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"pause\",\n            onClick: pause,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: `icon-pause ${myColorTheme ? `theme-${myColorTheme}-fill` : 'theme-default-fill'}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 10\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 8\n          }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"play\",\n            onClick: play,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: `icon-play ${myColorTheme ? `theme-${myColorTheme}-fill` : 'theme-default-fill'}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 220,\n                columnNumber: 10\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"next\",\n            \"aria-label\": \"Next\",\n            onClick: () => changeTrack(1),\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"icon-next\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 231,\n                columnNumber: 9\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 8\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Player, \"G15iXMnu5nObwXrhjHl6U00m4pk=\");\n\n_c = Player;\nexport default Player;\n\nvar _c;\n\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"sources":["/home/cab/deezflow/src/components/Player.jsx"],"names":["useState","useEffect","useRef","useContext","ColorThemeContext","Slider","PlayerContext","secondsToMMSS","seconds","Date","Math","round","toISOString","substr","Player","tracks","currentTrack","setCurrentTrack","_setCurrentTrack","isPlaying","setIsPlaying","myColorTheme","length","currentTrackElm","currentTrackRef","currentTime","setCurrentTime","isDisplayOff","setIsDisplayOff","current","onTimeUpdate","onTimeEnded","changeTrack","addEventListener","removeEventListener","load","play","track","pause","direction","nextTrackIndex","indexOf","onSliderChange","time","triggerToggle","bigPicture","title","artist","duration","el","src"],"mappings":"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","sourcesContent":["import { useState, useEffect, useRef, useContext } from 'react';\nimport ColorThemeContext from '../Contexts/ColorThemeContext';\nimport Slider from 'rc-slider';\n\nimport PlayerContext from '../Contexts/PlayerContext';\n\nimport 'rc-slider/assets/index.css';\nimport '../player.css';\n/**\n * Converti des secondes au format MM:SS\n *\n * @param {Number} seconds\n *\n * @returns String\n */\nconst secondsToMMSS = (seconds) => new Date(Math.round(seconds) * 1000).toISOString().substr(14, 5);\n\nfunction Player() {\n\tconst { tracks, currentTrack, setCurrentTrack: _setCurrentTrack, isPlaying, setIsPlaying } = useContext(\n\t\tPlayerContext\n\t);\n\n\tconst { myColorTheme } = useContext(ColorThemeContext);\n\n\t// Si on a pas de musiques, on n'affiche pas le player\n\tif (!tracks || tracks.length === 0 || !currentTrack) {\n\t\treturn null;\n\t}\n\n\t// Référence vers l'élément DOM audio.\n\t// Permet d'appeler play, pause et de tracker le temps de la musique\n\tconst currentTrackElm = useRef();\n\n\t// Hack pour pouvoir garder la musique courante à jour\n\t// dans les callbacks des listeners (addEventListener)\n\tconst currentTrackRef = useRef(tracks[0]);\n\n\t// Le temps de la musique en cours\n\tconst [ currentTime, setCurrentTime ] = useState(0);\n\n\t// Change la vue du lecteur (petit ou grand)\n\tconst [ isDisplayOff, setIsDisplayOff ] = useState(false);\n\n\t/**\n   * Si la playlist change (tracks), on la joue automatiquement\n   * et on lance la première musique.\n   */\n\tuseEffect(\n\t\t() => {\n\t\t\tsetIsPlaying(true);\n\t\t},\n\t\t[ tracks ]\n\t);\n\n\t/**\n   * Lorsque l'élément DOM audio est set, on l'initialise\n   */\n\tuseEffect(\n\t\t() => {\n\t\t\t// Si l'élément DOM n'est pas encore accessible, on sort\n\t\t\tif (!currentTrackElm.current) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Callback pour traquer le temps passé\n\t\t\tconst onTimeUpdate = () => {\n\t\t\t\tsetCurrentTime(currentTrackElm.current.currentTime);\n\t\t\t};\n\n\t\t\t// Callback pour savoir lorsque la musique est finie\n\t\t\tconst onTimeEnded = () => {\n\t\t\t\tchangeTrack(1);\n\t\t\t};\n\n\t\t\t// Ajout des listeners\n\t\t\tcurrentTrackElm.current.addEventListener('timeupdate', onTimeUpdate);\n\t\t\tcurrentTrackElm.current.addEventListener('ended', onTimeEnded);\n\n\t\t\t// Fonction exécutée lorsque le composant est démonté (détruit)\n\t\t\treturn () => {\n\t\t\t\t// Si l'élément DOM à été initialisé, on retire ses event listener\n\t\t\t\tif (currentTrackElm.current) {\n\t\t\t\t\tcurrentTrackElm.current.removeEventListener('timeupdate', onTimeUpdate);\n\t\t\t\t\tcurrentTrackElm.current.removeEventListener('ended', onTimeEnded);\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\t\t[ currentTrackElm.current ]\n\t);\n\n\t/**\n   * Lorsque la musique en cours change, on la charge (load)\n   * puis si le lecteur était en cours de lecture, on lance play()\n   */\n\tuseEffect(\n\t\t() => {\n\t\t\tif (!currentTrack) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcurrentTrackElm.current.load();\n\n\t\t\tif (isPlaying) {\n\t\t\t\tplay();\n\t\t\t}\n\t\t},\n\t\t[ currentTrack ]\n\t);\n\n\t/**\n   * Cette fonction nous permet de garder currentTrackRef.current et\n   * currentTrack synchronisés.\n   */\n\tfunction setCurrentTrack(track) {\n\t\tcurrentTrackRef.current = track;\n\t\t_setCurrentTrack(track);\n\t}\n\n\t/**\n   * Joue la musique courante\n   */\n\tfunction play() {\n\t\tcurrentTrackElm.current.play();\n\t\tsetIsPlaying(true);\n\t}\n\n\t/**\n   * Met la musique courante en pause\n   */\n\tfunction pause() {\n\t\tcurrentTrackElm.current.pause();\n\t\tsetIsPlaying(false);\n\t}\n\n\t/**\n   * Change de musique selon la direction :\n   * 1 = avance\n   * -1 = recule\n   */\n\tfunction changeTrack(direction = 1) {\n\t\t// On récupère l'index de la musique suivante\n\t\tconst nextTrackIndex = tracks.indexOf(currentTrackRef.current) + direction;\n\n\t\t// Si l'index de la prochaine musique n'est pas dans la range du tableau tracks,\n\t\t// on ne fait rien.\n\t\tif (nextTrackIndex < 0 || nextTrackIndex === tracks.length) {\n\t\t\treturn;\n\t\t}\n\n\t\t// On reset le temps de la musique courante\n\t\tcurrentTrackElm.current.currentTime = 0;\n\n\t\t// On définit la prochaine musique\n\t\tsetCurrentTrack(tracks[nextTrackIndex]);\n\t}\n\n\t/**\n   * Excécuté lorsque la valeur du slider change\n   * On met à jour le temps courant de la musique courante\n   */\n\tfunction onSliderChange(time) {\n\t\tcurrentTrackElm.current.currentTime = time;\n\t}\n\n\t/**\n   * Change l'apparence du lecteur\n   */\n\tfunction triggerToggle() {\n\t\tsetIsDisplayOff(!isDisplayOff);\n\t}\n\n\treturn (\n\t\t<div className={`player ${!isDisplayOff ? 'isDisplayOff-checked' : ''}`}>\n\t\t\t<div className=\"playerBlock\">\n\t\t\t\t<span onClick={() => triggerToggle()} className=\"icon-arrow\" />\n\n\t\t\t\t<div>\n\t\t\t\t\t<img src={currentTrack.bigPicture} alt=\"Pochette de l'album\" />\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div className=\"globalPlayer\">\n\t\t\t\t<div className=\"titlePlayer\">\n\t\t\t\t\t<p className=\"title-track\">{currentTrack.title}</p>\n\t\t\t\t\t<p className=\"singer\">{currentTrack.artist}</p>\n\t\t\t\t</div>\n\n\t\t\t\t<Slider value={currentTime} max={currentTrack.duration} onChange={onSliderChange} />\n\n\t\t\t\t<div className=\"blockTime\">\n\t\t\t\t\t<p>{secondsToMMSS(currentTime)}</p>\n\t\t\t\t\t<p>{secondsToMMSS(currentTrack.duration)}</p>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"blockPlayer\">\n\t\t\t\t\t<audio ref={(el) => (currentTrackElm.current = el)}>\n\t\t\t\t\t\t<source src={currentTrack.src} />\n\t\t\t\t\t</audio>\n\n\t\t\t\t\t<div className=\"buttonPlayer\">\n\t\t\t\t\t\t<button type=\"button\" className=\"prev\" aria-label=\"Previous\" onClick={() => changeTrack(-1)}>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<span className=\"icon-next\" />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</button>\n\n\t\t\t\t\t\t{isPlaying ? (\n\t\t\t\t\t\t\t<button className=\"pause\" onClick={pause}>\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\t\tclassName={`icon-pause ${myColorTheme\n\t\t\t\t\t\t\t\t\t\t\t? `theme-${myColorTheme}-fill`\n\t\t\t\t\t\t\t\t\t\t\t: 'theme-default-fill'}`}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<button className=\"play\" onClick={play}>\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\t\tclassName={`icon-play ${myColorTheme\n\t\t\t\t\t\t\t\t\t\t\t? `theme-${myColorTheme}-fill`\n\t\t\t\t\t\t\t\t\t\t\t: 'theme-default-fill'}`}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t)}\n\n\t\t\t\t\t\t<button type=\"button\" className=\"next\" aria-label=\"Next\" onClick={() => changeTrack(1)}>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<span className=\"icon-next\" />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Player;\n"]},"metadata":{},"sourceType":"module"}