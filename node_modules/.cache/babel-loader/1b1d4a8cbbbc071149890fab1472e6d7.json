{"ast":null,"code":"var _jsxFileName = \"/home/cab/deezflow/src/components/Player.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useRef, useContext } from 'react';\nimport ColorThemeContext from '../Contexts/ColorThemeContext';\nimport Slider from 'rc-slider';\nimport PlayerContext from '../Contexts/PlayerContext';\nimport 'rc-slider/assets/index.css';\nimport '../player.css';\n/**\n * Converti des secondes au format MM:SS\n *\n * @param {Number} seconds\n *\n * @returns String\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst secondsToMMSS = seconds => new Date(Math.round(seconds) * 1000).toISOString().substr(14, 5);\n\nfunction Player() {\n  _s();\n\n  const {\n    tracks,\n    currentTrack,\n    setCurrentTrack: _setCurrentTrack\n  } = useContext(PlayerContext);\n  const {\n    myColorTheme\n  } = useContext(ColorThemeContext); // Si on a pas de musiques, on n'affiche pas le player\n\n  if (!tracks || tracks.length === 0 || !currentTrack) {\n    return null;\n  } // Référence vers l'élément DOM audio.\n  // Permet d'appeler play, pause et de tracker le temps de la musique\n\n\n  const currentTrackElm = useRef(); // Hack pour pouvoir garder la musique courante à jour\n  // dans les callbacks des listeners (addEventListener)\n\n  const currentTrackRef = useRef(tracks[0]); // Le temps de la musique en cours\n\n  const [currentTime, setCurrentTime] = useState(0); // Est-ce que la musique en cours défile ?\n\n  const [isPlaying, setIsPlaying] = useState(true); // Change la vue du lecteur (petit ou grand)\n\n  const [isDisplayOff, setIsDisplayOff] = useState(false);\n  /**\n   * Si la playlist change (tracks), on la joue automatiquement\n   * et on lance la première musique.\n   */\n\n  useEffect(() => {\n    setIsPlaying(true);\n  }, [tracks]);\n  /**\n   * Lorsque l'élément DOM audio est set, on l'initialise\n   */\n\n  useEffect(() => {\n    // Si l'élément DOM n'est pas encore accessible, on sort\n    if (!currentTrackElm.current) {\n      return;\n    } // Callback pour traquer le temps passé\n\n\n    const onTimeUpdate = () => {\n      setCurrentTime(currentTrackElm.current.currentTime);\n    }; // Callback pour savoir lorsque la musique est finie\n\n\n    const onTimeEnded = () => {\n      changeTrack(1);\n    }; // Ajout des listeners\n\n\n    currentTrackElm.current.addEventListener('timeupdate', onTimeUpdate);\n    currentTrackElm.current.addEventListener('ended', onTimeEnded); // Fonction exécutée lorsque le composant est démonté (détruit)\n\n    return () => {\n      // Si l'élément DOM à été initialisé, on retire ses event listener\n      if (currentTrackElm.current) {\n        currentTrackElm.current.removeEventListener('timeupdate', onTimeUpdate);\n        currentTrackElm.current.removeEventListener('ended', onTimeEnded);\n      }\n    };\n  }, [currentTrackElm.current]);\n  /**\n   * Lorsque la musique en cours change, on la charge (load)\n   * puis si le lecteur était en cours de lecture, on lance play()\n   */\n\n  useEffect(() => {\n    if (!currentTrack) {\n      return;\n    }\n\n    currentTrackElm.current.load();\n\n    if (isPlaying) {\n      play();\n    }\n  }, [currentTrack]);\n  /**\n   * Cette fonction nous permet de garder currentTrackRef.current et\n   * currentTrack synchronisés.\n   */\n\n  function setCurrentTrack(track) {\n    currentTrackRef.current = track;\n\n    _setCurrentTrack(track);\n  }\n  /**\n   * Joue la musique courante\n   */\n\n\n  function play() {\n    currentTrackElm.current.play();\n    setIsPlaying(true);\n  }\n  /**\n   * Met la musique courante en pause\n   */\n\n\n  function pause() {\n    currentTrackElm.current.pause();\n    setIsPlaying(false);\n  }\n  /**\n   * Change de musique selon la direction :\n   * 1 = avance\n   * -1 = recule\n   */\n\n\n  function changeTrack(direction = 1) {\n    // On récupère l'index de la musique suivante\n    const nextTrackIndex = tracks.indexOf(currentTrackRef.current) + direction; // Si l'index de la prochaine musique n'est pas dans la range du tableau tracks,\n    // on ne fait rien.\n\n    if (nextTrackIndex < 0 || nextTrackIndex === tracks.length) {\n      return;\n    } // On reset le temps de la musique courante\n\n\n    currentTrackElm.current.currentTime = 0; // On définit la prochaine musique\n\n    setCurrentTrack(tracks[nextTrackIndex]);\n  }\n  /**\n   * Excécuté lorsque la valeur du slider change\n   * On met à jour le temps courant de la musique courante\n   */\n\n\n  function onSliderChange(time) {\n    currentTrackElm.current.currentTime = time;\n  }\n  /**\n   * Change l'apparence du lecteur\n   */\n\n\n  function triggerToggle() {\n    setIsDisplayOff(!isDisplayOff);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `player ${!isDisplayOff ? 'isDisplayOff-checked' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playerBlock\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        onClick: () => triggerToggle(),\n        className: \"icon-arrow\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: currentTrack.bigPicture,\n          alt: \"Pochette de l'album\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"globalPlayer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"titlePlayer\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"title-track\",\n          children: currentTrack.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"singer\",\n          children: currentTrack.artist\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Slider, {\n        value: currentTime,\n        max: currentTrack.duration,\n        onChange: onSliderChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"blockTime\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: secondsToMMSS(currentTime)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: secondsToMMSS(currentTrack.duration)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"blockPlayer\",\n        children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n          ref: el => currentTrackElm.current = el,\n          children: /*#__PURE__*/_jsxDEV(\"source\", {\n            src: currentTrack.src\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"buttonPlayer\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"prev\",\n            \"aria-label\": \"Previous\",\n            onClick: () => changeTrack(-1),\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"icon-next\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 204,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 13\n          }, this), isPlaying ? /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"pause\",\n            onClick: pause,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: `icon-pause ${myColorTheme ? `theme-${myColorTheme}-fill` : \"theme-default-fill\"}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 211,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"play\",\n            onClick: play,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: `icon-play ${myColorTheme ? `theme-${myColorTheme}-fill` : \"theme-default-fill\"}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 217,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"next\",\n            \"aria-label\": \"Next\",\n            onClick: () => changeTrack(1),\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"icon-next\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 229,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Player, \"+Gg2Unt+B6dDbwry7b7ip4D/7ns=\");\n\n_c = Player;\nexport default Player;\n\nvar _c;\n\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"sources":["/home/cab/deezflow/src/components/Player.jsx"],"names":["useState","useEffect","useRef","useContext","ColorThemeContext","Slider","PlayerContext","secondsToMMSS","seconds","Date","Math","round","toISOString","substr","Player","tracks","currentTrack","setCurrentTrack","_setCurrentTrack","myColorTheme","length","currentTrackElm","currentTrackRef","currentTime","setCurrentTime","isPlaying","setIsPlaying","isDisplayOff","setIsDisplayOff","current","onTimeUpdate","onTimeEnded","changeTrack","addEventListener","removeEventListener","load","play","track","pause","direction","nextTrackIndex","indexOf","onSliderChange","time","triggerToggle","bigPicture","title","artist","duration","el","src"],"mappings":"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","sourcesContent":["import { useState, useEffect, useRef, useContext } from 'react';\nimport ColorThemeContext from '../Contexts/ColorThemeContext';\nimport Slider from 'rc-slider';\n\nimport PlayerContext from '../Contexts/PlayerContext';\n\nimport 'rc-slider/assets/index.css';\nimport '../player.css';\n/**\n * Converti des secondes au format MM:SS\n *\n * @param {Number} seconds\n *\n * @returns String\n */\nconst secondsToMMSS = (seconds) =>\n  new Date(Math.round(seconds) * 1000).toISOString().substr(14, 5);\n\nfunction Player() {\n  const { tracks, currentTrack, setCurrentTrack: _setCurrentTrack } = useContext(PlayerContext)\n  const { myColorTheme } = useContext(ColorThemeContext);\n\n  // Si on a pas de musiques, on n'affiche pas le player\n  if (!tracks || tracks.length === 0 || !currentTrack) {\n    return null;\n  }\n\n  // Référence vers l'élément DOM audio.\n  // Permet d'appeler play, pause et de tracker le temps de la musique\n  const currentTrackElm = useRef();\n\n  // Hack pour pouvoir garder la musique courante à jour\n  // dans les callbacks des listeners (addEventListener)\n  const currentTrackRef = useRef(tracks[0]);\n\n  // Le temps de la musique en cours\n  const [currentTime, setCurrentTime] = useState(0);\n\n  // Est-ce que la musique en cours défile ?\n  const [isPlaying, setIsPlaying] = useState(true);\n\n  // Change la vue du lecteur (petit ou grand)\n  const [isDisplayOff, setIsDisplayOff] = useState(false);\n\n  /**\n   * Si la playlist change (tracks), on la joue automatiquement\n   * et on lance la première musique.\n   */\n  useEffect(() => {\n    setIsPlaying(true);\n  }, [tracks])\n\n  /**\n   * Lorsque l'élément DOM audio est set, on l'initialise\n   */\n  useEffect(() => {\n    // Si l'élément DOM n'est pas encore accessible, on sort\n    if (!currentTrackElm.current) {\n      return;\n    }\n\n    // Callback pour traquer le temps passé\n    const onTimeUpdate = () => {\n      setCurrentTime(currentTrackElm.current.currentTime);\n    };\n\n    // Callback pour savoir lorsque la musique est finie\n    const onTimeEnded = () => {\n      changeTrack(1);\n    };\n\n    // Ajout des listeners\n    currentTrackElm.current.addEventListener('timeupdate', onTimeUpdate);\n    currentTrackElm.current.addEventListener('ended', onTimeEnded);\n\n    // Fonction exécutée lorsque le composant est démonté (détruit)\n    return () => {\n      // Si l'élément DOM à été initialisé, on retire ses event listener\n      if (currentTrackElm.current) {\n        currentTrackElm.current.removeEventListener('timeupdate', onTimeUpdate);\n        currentTrackElm.current.removeEventListener('ended', onTimeEnded);\n      }\n    };\n  }, [currentTrackElm.current]);\n\n  /**\n   * Lorsque la musique en cours change, on la charge (load)\n   * puis si le lecteur était en cours de lecture, on lance play()\n   */\n  useEffect(() => {\n    if (!currentTrack) {\n      return;\n    }\n\n    currentTrackElm.current.load();\n\n    if (isPlaying) {\n      play();\n    }\n  }, [currentTrack]);\n\n  /**\n   * Cette fonction nous permet de garder currentTrackRef.current et\n   * currentTrack synchronisés.\n   */\n  function setCurrentTrack(track) {\n    currentTrackRef.current = track;\n    _setCurrentTrack(track);\n  }\n\n  /**\n   * Joue la musique courante\n   */\n  function play() {\n    currentTrackElm.current.play();\n    setIsPlaying(true);\n  }\n\n  /**\n   * Met la musique courante en pause\n   */\n  function pause() {\n    currentTrackElm.current.pause();\n    setIsPlaying(false);\n  }\n\n  /**\n   * Change de musique selon la direction :\n   * 1 = avance\n   * -1 = recule\n   */\n  function changeTrack(direction = 1) {\n    // On récupère l'index de la musique suivante\n    const nextTrackIndex = tracks.indexOf(currentTrackRef.current) + direction;\n\n    // Si l'index de la prochaine musique n'est pas dans la range du tableau tracks,\n    // on ne fait rien.\n    if (nextTrackIndex < 0 || nextTrackIndex === tracks.length) {\n      return;\n    }\n\n    // On reset le temps de la musique courante\n    currentTrackElm.current.currentTime = 0;\n\n    // On définit la prochaine musique\n    setCurrentTrack(tracks[nextTrackIndex]);\n  }\n\n  /**\n   * Excécuté lorsque la valeur du slider change\n   * On met à jour le temps courant de la musique courante\n   */\n  function onSliderChange(time) {\n    currentTrackElm.current.currentTime = time;\n  }\n\n  /**\n   * Change l'apparence du lecteur\n   */\n  function triggerToggle() {\n    setIsDisplayOff(!isDisplayOff);\n  }\n\n  return (\n    <div className={`player ${!isDisplayOff ? 'isDisplayOff-checked' : ''}`}>\n      <div className=\"playerBlock\">\n        <span onClick={() => triggerToggle()} className=\"icon-arrow\"></span>\n\n        <div>\n          <img src={currentTrack.bigPicture} alt=\"Pochette de l'album\" />\n        </div>\n      </div>\n\n      <div className=\"globalPlayer\">\n        <div className=\"titlePlayer\">\n          <p className=\"title-track\">{currentTrack.title}</p>\n          <p className=\"singer\">{currentTrack.artist}</p>\n        </div>\n\n        <Slider\n          value={currentTime}\n          max={currentTrack.duration}\n          onChange={onSliderChange}\n        />\n\n        <div className=\"blockTime\">\n          <p>{secondsToMMSS(currentTime)}</p>\n          <p>{secondsToMMSS(currentTrack.duration)}</p>\n        </div>\n\n        <div className=\"blockPlayer\">\n          <audio ref={(el) => (currentTrackElm.current = el)}>\n            <source src={currentTrack.src} />\n          </audio>\n\n          <div className=\"buttonPlayer\">\n            <button\n              type=\"button\"\n              className=\"prev\"\n              aria-label=\"Previous\"\n              onClick={() => changeTrack(-1)}\n            >\n              <div>\n                <span className=\"icon-next\"></span>\n              </div>\n            </button>\n\n            {isPlaying ? (\n              <button className=\"pause\" onClick={pause}>\n                <div>\n                  <span className={`icon-pause ${myColorTheme? `theme-${myColorTheme}-fill`:\"theme-default-fill\"}`}></span>\n                </div>\n              </button>\n            ) : (\n              <button className=\"play\" onClick={play}>\n                <div>\n                  <span className={`icon-play ${myColorTheme? `theme-${myColorTheme}-fill`:\"theme-default-fill\"}`}></span>\n                </div>\n              </button>\n            )}\n\n            <button\n              type=\"button\"\n              className=\"next\"\n              aria-label=\"Next\"\n              onClick={() => changeTrack(1)}\n            >\n              <div>\n                <span className=\"icon-next\"></span>\n              </div>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Player;\n"]},"metadata":{},"sourceType":"module"}