{"ast":null,"code":"var _jsxFileName = \"/home/cab/deezflow/src/components/MyPlaylist.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useContext } from 'react';\nimport { useParams } from 'react-router-dom';\nimport './MyPlaylist.css';\nimport ColorThemeContext from '../Contexts/ColorThemeContext';\nimport PlayerContext from '../Contexts/PlayerContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MyPlaylist = () => {\n  _s();\n\n  const {\n    setTracks,\n    setCurrentTrack,\n    isPlaying,\n    setIsPlaying\n  } = useContext(PlayerContext);\n  const {\n    myColorTheme\n  } = useContext(ColorThemeContext);\n  const {\n    id\n  } = useParams();\n  const [myPlaylist, setMyPlaylist] = useState([]);\n  const [myPlaylistCover, setMyPlaylistCover] = useState('');\n\n  function onPlayPlaylist() {\n    setTracks(myPlaylist);\n    setIsPlaying(true);\n  }\n\n  function onPlayTrack(track) {\n    onPlayPlaylist();\n    setCurrentTrack(track);\n  }\n\n  useEffect(() => {\n    fetch(`${process.env.REACT_APP_DEEZFLOW_API}/deezer/playlist/${id || myPlaylistId}`).then(response => response.json()).then(data => {\n      if (data.error) {\n        return setMyPlaylist([]);\n      }\n\n      setMyPlaylistCover(data['picture_medium']);\n      setMyPlaylist(data.tracks.data.map(track => ({\n        bigPicture: track.album.cover_big,\n        smallPicture: track.album.cover_small,\n        title: track.title,\n        artist: track.artist.name,\n        duration: 30,\n        src: track.preview\n      })));\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"playlist-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playlist-cover\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: myPlaylistCover,\n        alt: \"cover\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"buttonPlay\",\n      onClick: onPlayPlaylist,\n      children: \"PLAY\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"warpPlaylist\",\n      children: myPlaylist.map(track => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"track-info-box active\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"track-info-text\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"title-track\",\n            children: track.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"singer\",\n            children: track.artist\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 8\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 7\n        }, this), isPlaying ? /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"pause\",\n          onClick: () => setIsPlaying(false),\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: `icon-pause ${myColorTheme ? `theme-${myColorTheme}-fill` : 'theme-default-fill'}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 10\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 8\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"play\",\n          onClick: () => onPlayTrack(track),\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: `icon-play ${myColorTheme ? `theme-${myColorTheme}-fill` : 'theme-default-fill'}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 10\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 8\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 6\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 3\n  }, this);\n};\n\n_s(MyPlaylist, \"36wlhRlQIh0Wdci1fM9Bn9kPXes=\", false, function () {\n  return [useParams];\n});\n\n_c = MyPlaylist;\nexport default MyPlaylist;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyPlaylist\");","map":{"version":3,"sources":["/home/cab/deezflow/src/components/MyPlaylist.jsx"],"names":["useState","useEffect","useContext","useParams","ColorThemeContext","PlayerContext","MyPlaylist","setTracks","setCurrentTrack","isPlaying","setIsPlaying","myColorTheme","id","myPlaylist","setMyPlaylist","myPlaylistCover","setMyPlaylistCover","onPlayPlaylist","onPlayTrack","track","fetch","process","env","REACT_APP_DEEZFLOW_API","myPlaylistId","then","response","json","data","error","tracks","map","bigPicture","album","cover_big","smallPicture","cover_small","title","artist","name","duration","src","preview"],"mappings":"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","sourcesContent":["import { useState, useEffect, useContext } from 'react';\nimport { useParams } from 'react-router-dom';\nimport './MyPlaylist.css';\nimport ColorThemeContext from '../Contexts/ColorThemeContext';\nimport PlayerContext from '../Contexts/PlayerContext';\n\nconst MyPlaylist = () => {\n\tconst { setTracks, setCurrentTrack, isPlaying, setIsPlaying } = useContext(PlayerContext);\n\tconst { myColorTheme } = useContext(ColorThemeContext);\n\n\tconst { id } = useParams();\n\tconst [ myPlaylist, setMyPlaylist ] = useState([]);\n\tconst [ myPlaylistCover, setMyPlaylistCover ] = useState('');\n\n\tfunction onPlayPlaylist() {\n\t\tsetTracks(myPlaylist);\n\t\tsetIsPlaying(true);\n\t}\n\n\tfunction onPlayTrack(track) {\n\t\tonPlayPlaylist();\n\t\tsetCurrentTrack(track);\n\t}\n\n\tuseEffect(() => {\n\t\tfetch(`${process.env.REACT_APP_DEEZFLOW_API}/deezer/playlist/${id || myPlaylistId}`)\n\t\t\t.then((response) => response.json())\n\t\t\t.then((data) => {\n\t\t\t\tif (data.error) {\n\t\t\t\t\treturn setMyPlaylist([]);\n\t\t\t\t}\n\n\t\t\t\tsetMyPlaylistCover(data['picture_medium']);\n\n\t\t\t\tsetMyPlaylist(\n\t\t\t\t\tdata.tracks.data.map((track) => ({\n\t\t\t\t\t\tbigPicture: track.album.cover_big,\n\t\t\t\t\t\tsmallPicture: track.album.cover_small,\n\t\t\t\t\t\ttitle: track.title,\n\t\t\t\t\t\tartist: track.artist.name,\n\t\t\t\t\t\tduration: 30,\n\t\t\t\t\t\tsrc: track.preview\n\t\t\t\t\t}))\n\t\t\t\t);\n\t\t\t});\n\t}, []);\n\n\treturn (\n\t\t<div className=\"playlist-container\">\n\t\t\t<div className=\"playlist-cover\">\n\t\t\t\t<img src={myPlaylistCover} alt=\"cover\" />\n\t\t\t</div>\n\n\t\t\t<button className=\"buttonPlay\" onClick={onPlayPlaylist}>\n\t\t\t\tPLAY\n\t\t\t</button>\n\n\t\t\t<div className=\"warpPlaylist\">\n\t\t\t\t{myPlaylist.map((track) => (\n\t\t\t\t\t<div className=\"track-info-box active\">\n\t\t\t\t\t\t<div className=\"track-info-text\">\n\t\t\t\t\t\t\t<p className=\"title-track\">{track.title}</p>\n\t\t\t\t\t\t\t<p className=\"singer\">{track.artist}</p>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t{isPlaying ? (\n\t\t\t\t\t\t\t<button className=\"pause\" onClick={() => setIsPlaying(false)}>\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\t\tclassName={`icon-pause ${myColorTheme\n\t\t\t\t\t\t\t\t\t\t\t? `theme-${myColorTheme}-fill`\n\t\t\t\t\t\t\t\t\t\t\t: 'theme-default-fill'}`}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<button className=\"play\" onClick={() => onPlayTrack(track)}>\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\t\tclassName={`icon-play ${myColorTheme\n\t\t\t\t\t\t\t\t\t\t\t? `theme-${myColorTheme}-fill`\n\t\t\t\t\t\t\t\t\t\t\t: 'theme-default-fill'}`}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default MyPlaylist;\n"]},"metadata":{},"sourceType":"module"}